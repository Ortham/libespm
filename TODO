Coming soon:

Extraction of record content from ESP/ESMs.
----The header thing is now done. At least for Oblivion and above. Haven't a clue on Morrowind, however. Probably needs some sort of tweaking to work with Morrowind. 10/23/2012
Extraction of the useful data from ESS files.
--Variables are now supported, 05/31/2012
Code to generate the struct representing the file format for any all games (including future ones) using the ESP/ESM format. This is possible since they use a similar basic structure. One can use this structure to create a skeleton of the file format and then parse through using the predefined format of lengths and sizes of fields to create the actual file struct that will be used per game. The records are gained by using the format the is consistent across all 5 games at the moment.
--Basic code is just about done. 10/09/2012
Add accessors for getting various stuff from the structs.
--Record retrieval is done, as is searching by field data. 12/25/2012
--Maybe return a list of IDs. This one is very much a maybe
Take care of a possible special case in reading fields that came to light the other day. This is trivial, but an example still needs to materialize.
Take care of possible Morrowind support. This appears trivial and will go ahead and add in support if it is indeed trivial. No point in not taking care of it.
Run some testing to get an idea of how long things take, get an idea of the memory handling, and some general user feedback on the overall design.
Break more functions up into their own namespaces/groups/clumps/whatever organization I end up going with to make more logical sense and help reduce clutter.
Cut out a lot of the dead code and optimize condition statements. For the latter, I noticed that I've got some pointless checks in place that could be removed to improve performance some, if at all, by a trivial amount. May be minor, but the readability will be enhanced.
Look into the general style and possibly change it up some.
Add some utility functions, such as checking various flags.
--This item may expand/contract over time.
Fix the memory handling
See if we can make it so that both common line endings (\n and \r\n) are able to be used for the configuration file and manage this in the reading code for the file


Not coming soon but planned:

Update the documentation.

Possibly break the documentation out into separate files to make the code easier to look through.

A lot of stuff. XD


Somewhere on the time-line:

Make things saner.

Another overhaul of the organization of the code:
**One possibility for this is to break out each namespace into a separate repository, project, or something and then use the submodules feature of git to link them all together.
**Another possibility is to have a single umbrella project, repository, or whatever and set up each portion as a separate directory or something.
**Either way, the includes and stuff would need to be changed to reflect the new structure.
*Look into converting some functions into template functions for more sanity.
*Do a general cleanup of the code for readability and to make it easier to go through and stuff.

Finish up the handling of the table to assign value types to things via an external file to enable on the fly analysis of most data. The complex data stuff will need some interesting trickery to handle without making things game dependent, however. I've got an idea in mind for that, but won't think on it too much until I get to this part.

Overhaul the storage and stuff that is used for the handling of plugin files (may be extended to more down the line as more files are supported). At the moment, new variables need to be added into the code itself when they are needed but that can and should be changed to allow for more flexibility and separation of the processes from the actual structure of the files. This will come after the current code is finished being changed, as it's a fairly large change.

Modify the makefile to be easier to read and generally just better.

Possibly convert part of the code to work with C instead of C++ to allow for more interaction with other languages. Though, the
 C++ containers and all may complicate matters.


Last modified:

By: deaths_soul (AKA MCP)
On: 02/07/2013
